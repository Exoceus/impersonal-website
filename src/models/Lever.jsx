/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 static/models/Lever_Full_Model.glb -T
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree } from "@react-three/fiber";
import { useDrag } from '@use-gesture/react';

export default function Lever({ setLeverPulled }) {
  const ref = useRef();
  const [position, setPosition] = useState([0, 5, 0]);
  const [isDragging, setIsDragging] = useState(false);
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;
  const bind = useDrag(
    ({ movement: [x, y], timeStamp, event, active }) => {
      const [og_x, , z] = position;
      console.log("offset", x, y)
      let new_y = 5 + (-y / aspect) * 4; // times 4 since we scale by 0.25
      if (new_y <= -5) {
        setLeverPulled(true);
        new_y = -5;
      } else if (new_y >= 5) {
        new_y = 5;
      }
      setPosition([og_x, new_y, z]);
      setIsDragging(active);
      return timeStamp;
    },
    { delay: true }
  );

  useEffect(() => {
    if (!isDragging) {
      setPosition([0, 5, 0])
    }
  }, [isDragging])


  const { nodes, materials } = useGLTF('models/Lever_Full_Model-transformed.glb')
  return (
    <group rotation={[0 * Math.PI / 180, 290 * Math.PI / 180, 0]} scale={0.25} dispose={null}>
      <group ref={ref} position={position}
        {...bind()}>
        <mesh geometry={nodes.Cylinder001.geometry} material={materials['Lever Shaft']} rotation={[-Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.Sphere.geometry} material={materials['Material.001']} position={[0, -7, 0]} rotation={[Math.PI / 2, 0, 0]} />
        </mesh>
      </group>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Cylinder_1.geometry} material={materials['Lever Front']} />
        <mesh geometry={nodes.Cylinder_2.geometry} material={materials['Lever Side']} />
        <mesh geometry={nodes.Cylinder_3.geometry} material={materials['Lever Front']} />
      </group>
    </group>
  )
}

useGLTF.preload('models/Lever_Full_Model-transformed.glb')
