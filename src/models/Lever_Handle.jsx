/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 static/models/Lever_Handle.glb -T
*/

import React, { useState, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { animated, useSpring } from "@react-spring/three";
import { useDrag } from '@use-gesture/react';
import { useThree, useFrame } from "@react-three/fiber";
import * as THREE from "three";

export default function Lever_Handle(props) {
  const ref = useRef();

  const [position, setPosition] = useState([2.5, 0, 0]);
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;

  useFrame(() => {
    // ref.current.rotation.z += 0.01;
    // ref.current.rotation.x += 0.01;
  });

  // const [spring, api] = useSpring(() => ({
  //   // position: [0, 0, 0],
  //   position: position,
  //   scale: 0.5,
  //   rotation: [0, 270 * Math.PI / 180, 0],
  //   config: { friction: 10 }
  // }));


  const bind = useDrag(
    ({ offset: [x, y], timeStamp, event }) => {
      const [og_x, , z] = position;
      console.log("offset", x, y)
      setPosition([og_x, -y / aspect, z]);
      // api.start({
      //   position: position,
      //   scale: 1,
      //   rotation: [y / aspect, x / aspect, 0]
      //   // position: position
      // });
      return timeStamp;
    },
    { delay: true }
  );

  // console.log({ ...spring })

  const { nodes, materials } = useGLTF('models/Lever_Handle-transformed.glb')
  return (
    <animated.group dispose={null} position={position}
      {...bind()}  {...props}>
      <mesh geometry={nodes.Cylinder001.geometry} material={materials['Lever Shaft']} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.Sphere.geometry} material={materials['Material.001']} position={[0, -7, 0]} rotation={[Math.PI / 2, 0, 0]} ref={ref} />
      </mesh>
    </animated.group>
  )
}

useGLTF.preload('models/Lever_Handle-transformed.glb')
